version: 2.1

jobs:

# ===================================================== FIRST JOB CREATE & ACTIVATE ENV THEN INSTALL ALL DEPENDENCIES

  install-and-test:
    docker:
      - image: cimg/python:3.10

    resource_class: small # Amount of CPU and RAM allocated to each container in a job.(It is best practice to specify a resource class, rather than relying on a default.)
    description: "Create & activate environment, then install all dependencies"
    steps:
      - checkout # pulls source code (git.repo) to the working directory
      - run:
          name: Installing dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
          when: always

# ===================================================== RUN LINTING TOOL: FLAKE 8
      - run:
          name: Linting
          command: |
            . venv/bin/activate
            flake8

# ===================================================== RUN ALL TESTS USING PYTEST
      - run:
          name: Testing
          command: |
            . venv/bin/activate
            mkdir pytest-results
            pytest --junitxml=pytest-results/junit.xml

      - store_test_results:
          path: pytest-results # store pytest reports in circle ci

# ===================================================== SECOND JOB BUILD & PUSH DOCKER IMAGE TO DOCKER HUB

  build_docker_image: 
    docker:
      - image: cimg/python:3.10
    resource_class: medium
    steps:
      # 1. Build the image
      # 2. Tag it
      # 3. Login to DockerHub
      # 4. Push the Docker image to the registry
      - checkout
      - setup_remote_docker: # This create a new remote Docker environment 
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: build and deploy to dockerhub
          command: |
            docker build -t $IMAGE_NAME .

            docker tag $IMAGE_NAME:latest $DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1

            echo $DOCKERHUB_TOKEN | docker login --username $DOCKERHUB_USER --password-stdin

            docker push "$DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1"

# ===================================================== SECOND JOB BUILD & PUSH DOCKER IMAGE TO DOCKER HUB

  deploy-to-heroku:
    machine: true
    steps:
      - checkout
      - run:
          name: Build and push Docker image to Heroku
          # 1. Install Heroku CLI on the build machine
          # 2. Login to Heroku registry passing our Heroku API Key as a parameter
          #    to donâ€™t need to authenticate with the Heroku login command. 
          # 3. Building and pushing our docker image to Heroku registry
          # 4. Releasing the new version of our app
          command: |
            sudo curl https://cli-assets.heroku.com/install.sh | sh
            HEROKU_API_KEY=$HEROKU_API_KEY heroku container:login
            HEROKU_API_KEY=$HEROKU_API_KEY heroku container:push -a $HEROKU_APP_NAME web
            HEROKU_API_KEY=$HEROKU_API_KEY heroku container:release -a $HEROKU_APP_NAME web

# ===================================================== WORKFLOWS DEFINES THE ORDER'S RUNNING JOBS AND THEIR OPTIONS

workflows:
  mainflow:
    jobs:
      - install-and-test
      - build_docker_image:
          context:
            - Orange-County-Lettings
          requires:
            - install-and-test # only runs build_docker_image job if the install-and-test job is completed
          filters:
            branches:
              only:
                - main # only runs build_docker_image job on main branch
      - deploy-to-heroku:
          context:
            - Orange-County-Lettings
          requires:
            - build_docker_image # only run deploy-to-heroku job if the build-and-push-to-dockerhub job has completed
          filters:
            branches:
              only: main # only run deploy-to-heroku job on master branch
